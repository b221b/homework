#include <iostream>
#include <fstream>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <iomanip>

using namespace std;

class CafeConstants {
public:
    static const int NUM_MANAGERS = 3;
    static const int NUM_ZONES = 3;
    static const int TABLES_PER_ZONE = 3;
    static const int CAFE_OPEN_TIME = 9 * 60;
    static const int CAFE_CLOSE_TIME = 23 * 60;
    static const int HOUR_RATE = 200;
};

class Table {
public:
    int zone;
    int number;
    bool occupied;
};

class Customer {
public:
    int numPeople;
    int zone;
    int tableNumber;
    vector<string> orders;
    int entranceTime;
    int exitTime;
    double payment;
};

class Manager {
public:
    string name;
    int tablesServed;
};

void printCheck(const Customer& customer) {
    cout << setfill('-') << setw(40) << "" << setfill(' ') << endl;
    cout << setw(20) << left << "| Гостей пришло: " << setw(19) << right << customer.numPeople << endl;
    cout << setw(20) << left << "| Зал: " << setw(19) << right << customer.zone << endl;
    cout << setw(20) << left << "| Стол: " << setw(19) << right << "Стол " << customer.zone * CafeConstants::TABLES_PER_ZONE + customer.tableNumber - 1 << endl;
    cout << "| Заказы: ";
    for (const string& order : customer.orders) {
        cout << order << " ";
    }
    cout << setw(18) << right << endl;

    cout << setw(20) << left << "| Пришли: " << setw(18) << right << customer.entranceTime / 60 << ":" << customer.entranceTime % 60 << endl;

    int exitHours = customer.exitTime / 60 % 24;
    int exitMinutes = customer.exitTime % 60;
    cout << setw(20) << left << "| Ушли: " << setw(18) << right << exitHours << ":" << exitMinutes << endl;

    cout << setw(20) << left << "| Заплатили: " << setw(18) << right << customer.payment << " рублей " << endl;
    cout << setfill('-') << setw(40) << "" << setfill(' ') << endl;
}

int main() {
    //----------------------Вывод в файл--------------------------------

            time_t t = time(0);
            struct tm now;
            localtime_s(&now, &t);
            char filename[80];
            strftime(filename, sizeof(filename), "%Y.%m.%d___%H-%M-%S_check.txt", &now);


            // поток для записи в файл
            ofstream outputFile(filename);

            // Перенаправляет cout в файл
            streambuf* coutbuf = cout.rdbuf(); // сохраняет исходный буфер cout
            cout.rdbuf(outputFile.rdbuf());    // редиректит в файл

    //----------------------Вывод в файл--------------------------------

    srand(time(0));

    Manager managers[CafeConstants::NUM_MANAGERS] = { {"Менеджер 1"}, {"Менеджер 2"}, {"Менеджер 3"} };
    Table tables[CafeConstants::NUM_ZONES * CafeConstants::TABLES_PER_ZONE];

    for (int i = 0; i < CafeConstants::NUM_ZONES * CafeConstants::TABLES_PER_ZONE; ++i) {
        tables[i].zone = i / CafeConstants::TABLES_PER_ZONE + 1;
        tables[i].number = i % CafeConstants::TABLES_PER_ZONE + 1;
        tables[i].occupied = false;
    }

    int currentTime = CafeConstants::CAFE_OPEN_TIME;

    //task 1
    int maxTablesServedByManager = 0;
    string managerWithMaxTablesServed;

    //task 2
    int maxTableUsage = 0;
    int mostDemandedTableNumber = 0;

    //task 3
    int maxCustomersAtTable = 0;
    int tableWithMaxCustomers = 0;

    int managerCalls[CafeConstants::NUM_MANAGERS] = { 0 };
    int tableUsage[CafeConstants::NUM_ZONES * CafeConstants::TABLES_PER_ZONE] = { 0 };

    double maxPayment = 0;

    double totalRevenue = 0;

    // Дополнительная переменная для подсчета количества гостей
    int totalGuests = 0;

    while (currentTime <= CafeConstants::CAFE_CLOSE_TIME) {
        // тут генерируется компания гостей
        Customer customer;
        customer.numPeople = rand() % 8 + 1; // от 1 до 8 человек
        customer.zone = rand() % CafeConstants::NUM_ZONES + 1;
        customer.tableNumber = -1;
        customer.entranceTime = currentTime;

        // Увеличение количества гостей
        totalGuests++;

        // поиск свободного столика
        for (int i = 0; i < CafeConstants::TABLES_PER_ZONE; ++i) {
            int tableIndex = (customer.zone - 1) * CafeConstants::TABLES_PER_ZONE + i;
            if (!tables[tableIndex].occupied) {
                customer.tableNumber = tables[tableIndex].number;
                tables[tableIndex].occupied = true;
                break;
            }
        }

        // тут заказы еды/питья
        // каждый гость может заказать от x(3) до y(1) обьектов
        int numCoffees = rand() % 3 + 1;
        int numTeas = rand() % 3 + 1;
        int numCookies = rand() % 2 + 1;
        int numMarmalades = rand() % 2 + 1;

        for (int i = 0; i < numCoffees; ++i) {
            customer.orders.push_back("Кофе");
        }

        for (int i = 0; i < numTeas; ++i) {
            customer.orders.push_back("Чай");
        }

        for (int i = 0; i < numCookies; ++i) {
            customer.orders.push_back("Печеньки");
        }

        for (int i = 0; i < numMarmalades; ++i) {
            customer.orders.push_back("Мармелад");
        }

        // выход из кафе
        customer.exitTime = currentTime + (numCoffees + numTeas + numCookies + numMarmalades) * 15; // время в минутах
        customer.payment = (customer.exitTime - customer.entranceTime) / 60.0 * CafeConstants::HOUR_RATE * customer.numPeople;

        // Обновляем общую выручку
        totalRevenue += customer.payment;

        // вывод информации
        cout << "Время: " << currentTime / 60 << ":" << currentTime % 60 << endl;
        cout << "Менеджер: " << managers[customer.zone - 1].name << endl;

        if (customer.tableNumber != -1) {
            printCheck(customer);
        }
        else {
            cout << "Нет свободных столов в зале " << customer.zone << endl;
        }
        //--------------------TASKS--------------------

        //--------------------task1--------------------
        for (int i = 0; i < CafeConstants::NUM_MANAGERS; ++i) {
            if (managerCalls[i] > maxTablesServedByManager) {
                maxTablesServedByManager = managerCalls[i];
                managerWithMaxTablesServed = managers[i].name;
            }
        }
        //--------------------task1 end----------------

        //--------------------task2 & 3--------------------
        if (customer.tableNumber != -1) {
            int tableIndex = (customer.zone - 1) * CafeConstants::TABLES_PER_ZONE + (customer.tableNumber - 1);
            tables[tableIndex].occupied = false;
            managerCalls[customer.zone - 1]++;
            tableUsage[tableIndex]++;

            double paymentForTable = (customer.exitTime - customer.entranceTime) / 60.0 * CafeConstants::HOUR_RATE * customer.numPeople;
            if (paymentForTable > maxPayment) {
                maxPayment = paymentForTable;
                mostDemandedTableNumber = customer.tableNumber;
            }

            if (tableUsage[tableIndex] > maxCustomersAtTable) {
                maxCustomersAtTable = tableUsage[tableIndex];
                tableWithMaxCustomers = customer.tableNumber; // Обновляем номер стола с наибольшим количеством посетителей
                mostDemandedTableNumber = customer.tableNumber; // Обновляем номер наиболее востребованного стола
            }
        }
        currentTime = customer.exitTime;

        if (customer.tableNumber != -1) {
            if (tableUsage[(customer.zone - 1) * CafeConstants::TABLES_PER_ZONE + (customer.tableNumber - 1)] > maxCustomersAtTable) {
                maxCustomersAtTable = tableUsage[(customer.zone - 1) * CafeConstants::TABLES_PER_ZONE + (customer.tableNumber - 1)];
                tableWithMaxCustomers = customer.tableNumber;
            }
        }
    }

    //--------------------task2 & 3 end----------------

    cout << " " << endl;
    cout << " " << endl;
    cout << "+-----------------------------------------------------------------------+" << endl;
    cout << "|                         Дополнительные задачи                         |" << endl;
    cout << "+-----------------------------------------------------------------------+" << endl;
    cout << "| Менеджер обслуживший больше столиков:           " << managerWithMaxTablesServed << endl;
    cout << "| Самый популярный столик:                        " << mostDemandedTableNumber << endl;
    cout << "| Стол с наибольшим количеством посетителей: Стол " << tableWithMaxCustomers << " с " << maxCustomersAtTable << " посетителями." << endl;
    cout << "| Выручка за день:                                " << totalRevenue << " рублей" << endl;
    cout << "| Количесвто групп посетителей:                   " << totalGuests << endl;
    cout << "+-----------------------------------------------------------------------+" << endl;

    //----------------------Вывод в файл--------------------------------

            //закрывает запись в файл
            outputFile.close();
            cout.rdbuf(coutbuf); // перекидывает инфу из cout

    //----------------------Вывод в файл--------------------------------

    return 0;
}